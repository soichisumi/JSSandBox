{
  "stats": {
    "suites": 5,
    "tests": 21,
    "passes": 19,
    "pending": 0,
    "failures": 2,
    "start": "2018-05-03T07:34:18.290Z",
    "end": "2018-05-03T07:34:18.344Z",
    "duration": 54,
    "testsRegistered": 21,
    "passPercent": 90.5,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "b56fbb3f-a4f1-4326-baef-989f145e1f44",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "45189174-cd84-43c5-8fa9-632a1d7b18c4",
        "title": "basic types",
        "fullFile": "/Users/s-sumi/go/src/github.com/yoyoyousei/JSSandBox/test/basic.js",
        "file": "/test/basic.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "array - map reduce",
            "fullTitle": "basic types array - map reduce",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let arr = [1, 4, 45, 8];\nlet res = arr\n  .map((num) => {\n    return num * 2;\n  })\n  .reduce((accum, current) => {\n    return accum + current;\n  });\nres.should.equal(116); // 2 + 8 + 90 + 16",
            "err": {},
            "isRoot": false,
            "uuid": "46e891bc-40b1-46c5-aef5-720326610357",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "HashMap",
            "fullTitle": "basic types HashMap",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let m = new Map();\nm.set('wei', 19);\nm.set('yoyo', 90);\nm.set(88, 'string result');\nm.get('yoyo').should.be.equal(90);\nm.get(88).should.be.equal('string result');",
            "err": {},
            "isRoot": false,
            "uuid": "04781434-1881-4670-b05e-0010733766c1",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "array foreach",
            "fullTitle": "basic types array foreach",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let arr = [2, 5, 7];\nlet res = [];\narr.forEach((value) => {\n  res.push(value);\n});\nres.length.should.equal(3);",
            "err": {},
            "isRoot": false,
            "uuid": "8fa61daa-e395-4846-a9ca-0d26ba42187d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "map foreach",
            "fullTitle": "basic types map foreach",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let m = new Map();\nm.set(6, 'yo');\nm.set('wei', 82);\nlet values = [];\n// 先にvalue\nm.forEach((value, key) => {\n  values.push(value);\n});\nvalues.length.should.equal(2);",
            "err": {},
            "isRoot": false,
            "uuid": "7cd011b5-7c17-4ed4-b5b3-d0087bf29aa1",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "set test",
            "fullTitle": "basic types set test",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let s = new Set();\ns.add('yo');\ns.add(8);\ns.has(8).should.be.true();",
            "err": {},
            "isRoot": false,
            "uuid": "00cf412d-b0ae-4395-ada0-5ed31c35d045",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "read txt",
            "fullTitle": "basic types read txt",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "// let lineReader = require('readline').createInterface({\n//   input: require('fs').createReadStream('./text.txt'),\n// });\n// lineReader.on('line', (l) => {\n//   console.log(l);\n// });\nrequire('fs').readFile('./test/test.txt', 'utf8', function (err, data) {\n  if (err) {\n    throw err;\n  }\n  console.log(data);\n});",
            "err": {},
            "isRoot": false,
            "uuid": "70b2089c-bccd-47ba-a232-6240b6470fb3",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "read txt line by line",
            "fullTitle": "basic types read txt line by line",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let fs = require('fs');\nlet readline = require('readline');\nlet instream = fs.createReadStream('./test/test.txt');\nlet outstream = new (require('stream'))();\nlet rl = readline.createInterface(instream, outstream);\n// 空行ならundefined\nrl.on('line', (line) => {\n  console.log(line);\n});\nrl.on('close', (line) => {\n  console.log(line);\n  console.log('read line end');\n});",
            "err": {},
            "isRoot": false,
            "uuid": "bcd5914b-7a06-43af-9881-dd4b31bf1342",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "forEach continue",
            "fullTitle": "basic types forEach continue",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let arr = [1, 2, 3, 4];\nlet res = [];\narr.forEach((val) => {\n  if (val === 3) return;\n  res.push(val);\n});\nres.should.deepEqual([1, 2, 4]);",
            "err": {},
            "isRoot": false,
            "uuid": "bc428a3b-5b55-4fe6-9c23-f22b566ba76c",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "Error class",
            "fullTitle": "basic types Error class",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let e = new Error('this is error');\nconsole.log(JSON.stringify(e));\ne.message.should.equal('this is error');\ne.name.should.equal('Error');",
            "err": {},
            "isRoot": false,
            "uuid": "2201e521-1faa-4552-9469-b6403809f0a7",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "46e891bc-40b1-46c5-aef5-720326610357",
          "04781434-1881-4670-b05e-0010733766c1",
          "8fa61daa-e395-4846-a9ca-0d26ba42187d",
          "7cd011b5-7c17-4ed4-b5b3-d0087bf29aa1",
          "00cf412d-b0ae-4395-ada0-5ed31c35d045",
          "70b2089c-bccd-47ba-a232-6240b6470fb3",
          "bcd5914b-7a06-43af-9881-dd4b31bf1342",
          "bc428a3b-5b55-4fe6-9c23-f22b566ba76c",
          "2201e521-1faa-4552-9469-b6403809f0a7"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 7,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "247f68e6-e53c-4321-819f-f1c425a573b8",
        "title": "promise",
        "fullFile": "/Users/s-sumi/go/src/github.com/yoyoyousei/JSSandBox/test/basic.js",
        "file": "/test/basic.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "simple",
            "fullTitle": "promise simple",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let a = new Promise((resolve, reject) => {\n  resolve(5);\n});\n// (resolve, reject)でchain\nreturn (\n  a\n    .then((num) => {\n      Promise.resolve('result');\n      num.should.equal(5);\n    })\n    // Promise.resolve で 次の段に値は渡らない\n    .then((s) => {\n      should(s).be.undefined();\n    })\n    .then((obj) => {\n      should(obj).be.undefined();\n    })\n);",
            "err": {},
            "isRoot": false,
            "uuid": "e7034896-ce66-469b-b739-6e00e1d848db",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "resolve, reject関数を持っていなくてもchainできるが、値は渡せない",
            "fullTitle": "promise resolve, reject関数を持っていなくてもchainできるが、値は渡せない",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "return (\n  new Promise((resolve, reject) => {\n    resolve(5);\n  })\n    .then((num) => {\n      Promise.resolve('result');\n      num.should.equal(5);\n    })\n    // 前段がpromiseでなくてもchainできる\n    // promiseでない関数でresolveしても次に渡らない\n    .then((s) => {\n      should(s).be.undefined();\n    })\n    // chainできる\n    .then((s) => {\n      should(s).be.undefined();\n    })\n    // chainできるが、前段がpromiseを返してなければresolveは使えない\n    // thenはchainできるだけで、前のthenがpromiseを返して来ているわけではない\n    .then((resolve, reject) => {\n      should(resolve).be.undefined();\n      // resolve, rejectできるのはpromiseでラップされた関数のみ\n      return new Promise((resolve, reject) => {\n        resolve('わいわい');\n      });\n    })\n    .then((s) => {\n      s.should.equal('わいわい');\n    })\n);",
            "err": {},
            "isRoot": false,
            "uuid": "f7474848-0f00-43cb-b079-9f78b80e2e8b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "途中でcatch",
            "fullTitle": "promise 途中でcatch",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let p = () => {\n  return new Promise((rs, rj) => {\n    rs(5);\n  });\n};\np()\n  .then((num) => {\n    return new Promise((resolve, reject) => {\n      console.log(`num: ${num}`);\n      if (num === 5) {\n        reject('だめーーーーー');\n      }\n      resolve(num);\n    });\n  })\n  .catch((err) => {\n    console.log(err);\n  })\n  .then((num) => {\n    console.log(`とりあえずリジェクトを投げるところ`);\n    return new Promise((resolve, reject) => {\n      reject('とりあえずリジェクト');\n    });\n  })\n  .catch((err) => {\n    console.log(err);\n  });",
            "err": {},
            "isRoot": false,
            "uuid": "4970d62f-33d1-4b58-b3c4-ca5bb985b3b0",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "reject後のthenの処理は飛ぶ",
            "fullTitle": "promise reject後のthenの処理は飛ぶ",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let p = () => {\n  return new Promise((rs, rj) => {\n    rs(5);\n  });\n};\np()\n  .then((num) => {\n    return new Promise((resolve, reject) => {\n      console.log(`num: ${num}`);\n      if (num === 5) {\n        reject('だめーーーーー');\n      }\n      resolve(num);\n    });\n  })\n  .then((num) => {\n    should.fail(); // ここにはこない\n  })\n  .catch((err) => {\n    console.log(err);\n  });",
            "err": {},
            "isRoot": false,
            "uuid": "a9b6d370-de83-44e0-98f7-6a8654e0d3c7",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "catchでchainをbreakしたい",
            "fullTitle": "promise catchでchainをbreakしたい",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let p = () => {\n  return new Promise((rs, rj) => {\n    rs(5);\n  });\n};\np()\n  .then((num) => {\n    return new Promise((resolve, reject) => {\n      console.log(`num: ${num}`);\n      if (num === 5) {\n        reject('だめーーーーー');\n      }\n      resolve(num);\n    });\n  })\n  // onRejectedが設定されていれば、そこでとまる\n  .then(\n    (num) => { },\n    (err) => {\n      console.log('onrejected');\n    }\n  )\n  .catch((err) => {\n    should.fail(); // ここにもこない\n  });",
            "err": {},
            "isRoot": false,
            "uuid": "a3e9f340-1ef6-473b-8537-d22761350699",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "chainの途中でcatchしたかったらonRejectedのみの",
            "fullTitle": "promise chainの途中でcatchしたかったらonRejectedのみの",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let p = () => {\n  return new Promise((rs, rj) => {\n    rs(5);\n  });\n};\np()\n  .then((num) => {\n    return new Promise((resolve, reject) => {\n      console.log(`num: ${num}`);\n      if (num === 5) {\n        reject('だめーーーーー');\n      }\n      resolve(num);\n    });\n  })\n  .then(null, (err) => {\n    console.log(err);\n  })\n  .then((num) => {\n    console.log(`とりあえずリジェクトを投げるところ`);\n    return new Promise((resolve, reject) => {\n      reject('とりあえずリジェクト');\n    });\n  })\n  .catch((err) => {\n    console.log(err);\n  });",
            "err": {},
            "isRoot": false,
            "uuid": "ed9ab354-a8db-403c-aca2-0ff4501e219d",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "promiseのエラーハンドリングのベストプラクティス",
            "fullTitle": "promise promiseのエラーハンドリングのベストプラクティス",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let p = () => {\n  return new Promise((rs, rj) => {\n    rs(5);\n  });\n};\nreturn p()\n  .then((num) => {\n    return new Promise((resolve, reject) => {\n      reject('だめ');\n    });\n  })\n  .then(null, (err) => {\n    should(err).be.equal('だめ');\n  });",
            "err": {},
            "isRoot": false,
            "uuid": "d4a0b317-5513-4ea7-8cfe-213cca2ac247",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "catchってrejectもerrorのcatchするんですか",
            "fullTitle": "promise catchってrejectもerrorのcatchするんですか",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let p = () => {\n  return new Promise((rs, rj) => {\n    rs(5);\n  });\n};\np()\n  .then((num) => {\n    throw new Error('error');\n  })\n  .then(() => {\n    fail()\n  })\n  .catch((err) => {\n    // console.log(err);\n    done()\n    // err.messageshould(err).be.equal('だめ');\n  })\n  .then(() => { fail() })",
            "err": {},
            "isRoot": false,
            "uuid": "a033a62f-27eb-4bd6-92b6-b5df0fb78a7e",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "e7034896-ce66-469b-b739-6e00e1d848db",
          "f7474848-0f00-43cb-b079-9f78b80e2e8b",
          "4970d62f-33d1-4b58-b3c4-ca5bb985b3b0",
          "a9b6d370-de83-44e0-98f7-6a8654e0d3c7",
          "a3e9f340-1ef6-473b-8537-d22761350699",
          "ed9ab354-a8db-403c-aca2-0ff4501e219d",
          "d4a0b317-5513-4ea7-8cfe-213cca2ac247",
          "a033a62f-27eb-4bd6-92b6-b5df0fb78a7e"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 2,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "926eea23-791f-4bc7-a9fb-9a01fc4f7ec9",
        "title": "failhookテスト",
        "fullFile": "/Users/s-sumi/go/src/github.com/yoyoyousei/JSSandBox/test/basic.js",
        "file": "/test/basic.js",
        "beforeHooks": [],
        "afterHooks": [
          {
            "title": "\"after each\" hook",
            "fullTitle": "failhookテスト \"after each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "// console.log(JSON.stringify(this));\nif(this.currentTest.state==='failed'){\n  console.log('しっぱいした')\n}else{\n  console.log(\"成功した\")\n}",
            "err": {},
            "isRoot": false,
            "uuid": "7ece8487-cf01-487a-9adb-b1f7347e2ac2",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [
          {
            "title": "fail",
            "fullTitle": "failhookテスト fail",
            "timedOut": false,
            "duration": 0,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "fail()",
            "err": {
              "message": "ReferenceError: fail is not defined",
              "estack": "ReferenceError: fail is not defined\n    at Context.it (test/basic.js:342:5)"
            },
            "isRoot": false,
            "uuid": "c24e504b-75db-46f9-8926-e31c74956c1f",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "succeed",
            "fullTitle": "failhookテスト succeed",
            "timedOut": false,
            "duration": 0,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "",
            "err": {},
            "isRoot": false,
            "uuid": "eb0006ef-05c9-474f-b863-22731763f21a",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "eb0006ef-05c9-474f-b863-22731763f21a"
        ],
        "failures": [
          "c24e504b-75db-46f9-8926-e31c74956c1f"
        ],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "c68cf84b-c337-40c6-b5d7-4d0b7864f1a4",
        "title": "exportされてない関数も書き換えられるのか",
        "fullFile": "/Users/s-sumi/go/src/github.com/yoyoyousei/JSSandBox/test/testModule.js",
        "file": "/test/testModule.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "かきかえ",
            "fullTitle": "exportされてない関数も書き換えられるのか かきかえ",
            "timedOut": false,
            "duration": 6,
            "state": "failed",
            "pass": false,
            "fail": true,
            "pending": false,
            "code": "t.Func(2).should.equal(4)\nconst nijo = td.replace(subt, 'nijo');\ntd.when(nijo()).thenReturn(111);\nt.Func(2).should.equal(111);",
            "err": {
              "message": "TypeError: Cannot read property 'should' of undefined",
              "estack": "TypeError: Cannot read property 'should' of undefined\n    at Context.<anonymous> (test/testModule.js:11:18)"
            },
            "isRoot": false,
            "uuid": "66b55ca0-16ed-40de-90f9-f9a1a8218c61",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [],
        "failures": [
          "66b55ca0-16ed-40de-90f9-f9a1a8218c61"
        ],
        "pending": [],
        "skipped": [],
        "duration": 6,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "466347a2-f98e-4011-914a-2ef86f6a44ce",
        "title": "doubleAll",
        "fullFile": "/Users/s-sumi/go/src/github.com/yoyoyousei/JSSandBox/test/underscoreTutorial.js",
        "file": "/test/underscoreTutorial.js",
        "beforeHooks": [],
        "afterHooks": [],
        "tests": [
          {
            "title": "double array elements",
            "fullTitle": "doubleAll double array elements",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "let obj = new target.UnderscoreTutorial();\nlet arr = [1, 4, 45, 8];\nlet res = obj.doubleAll(arr);\nres.length.should.equal(4);\nres[0].should.equal(2);\nres[1].should.equal(8);\nres[2].should.equal(90);\nres[3].should.equal(16);",
            "err": {},
            "isRoot": false,
            "uuid": "48abfc57-3a52-4384-8e28-f8199e1e8893",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "48abfc57-3a52-4384-8e28-f8199e1e8893"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 1,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2018
}